// Time Complexity :O(m*n)
// Space Complexity :O(m*n)
// Did this code successfully run on Leetcode :yes
// Any problem you faced while coding this :


// Your code here along with comments explaining your approach

class Solution {
    public int[][] floodFill(int[][] image, int sr, int sc, int color) 
    {
        if (image == null || image.length == 0) {
            return image; 
        }

        int dirs[][] = new int[][]{{1, 0}, {-1, 0}, {0, -1}, {0, 1}};
        int startColor = image[sr][sc];

        if (startColor == color) {
            return image; 
        }

        dfs(image, sr, sc, startColor, color, dirs);
        return image;
    }

    private void dfs(int[][] image, int r, int c, int startColor, int color, int[][] dirs) 
    {
        if (r < 0 || c < 0 || r == image.length || c == image[0].length || image[r][c] != startColor) {
            return;
        }

        image[r][c] = color;

        for (int[] dir : dirs) {
            int nr = r + dir[0];
            int nc = c + dir[1];
            dfs(image, nr, nc, startColor, color, dirs);
        }
    }
}
